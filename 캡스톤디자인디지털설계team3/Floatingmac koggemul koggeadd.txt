module TOP(A,B,C,Y,OutOfBound,CLK,RESETn);


input [15:0] A,B,C;
input CLK, RESETn;
output OutOfBound;
output [15:0] Y;

floatingmac toop(.A(A),.B(B),.C(C),.Y(Y),.OutOfBound(OutOfBound),.CLK(CLK),.RESETn(RESETn));

endmodule

module floatingmac(A,B,C,Y,OutOfBound,CLK,RESETn);

input [15:0] A,B,C;
input CLK, RESETn;
output OutOfBound;
output [15:0] Y;

wire [15:0] AB;
wire OutOfBound_inmul;
reg [15:0] C0,C1,C2,C3;
reg [15:0] AB1;
reg OutOfBound_inmul1;

always @ (posedge CLK, negedge RESETn)
begin
	if (!RESETn)
		begin
			AB1 	   <=0;
		end
	else
		begin
			C0 		<=C;
			C1			<=C0;
			C2			<=C1;
			C3			<=C2;
			AB1 		<= AB;
			OutOfBound_inmul1 <=OutOfBound_inmul;
		end
end

//stage 1,2,3
	floatingmul mac1 (
		.A(A), 
		.B(B), 
		.AB(AB),
		.OutOfBound(OutOfBound_inmul),
		.CLK(CLK),
		.RESETn(RESETn)
	);

//stage4
	floatingadd mac2 (
		.A(AB1), 
		.B(C3), 
		.OutOfBound_in(OutOfBound_inmul1),
		.SUM(Y),
		.OutOfBound(OutOfBound)
	);

endmodule

module floatingmul(A,B,AB,OutOfBound,CLK,RESETn);

input [15:0] A,B;
input CLK,RESETn;
output [15:0] AB;
output OutOfBound;

wire A_sign,B_sign;
wire [4:0] A_exponent, B_exponent;
wire [10:0] A_fraction, B_fraction;
wire AB_sign;
wire [4:0] AB_exponent;
wire [9:0]AB_fraction;
wire cin;

reg AB_sign1, AB_sign2, AB_sign3;
reg [4:0] A_exponent1, A_exponent2, A_exponent3, B_exponent1, B_exponent2, B_exponent3;
assign A_sign = A[15];
assign A_exponent = A[14:10];
assign A_fraction = {1'b1,A[9:0]}; //1.frac

assign B_sign = B[15];
assign B_exponent = B[14:10];
assign B_fraction = {1'b1,B[9:0]}; //1.frac

always @ (posedge CLK, negedge RESETn) begin
	if (!RESETn) begin
		AB_sign2 <= 0;
		AB_sign3 <= 0;
		A_exponent1 <=0;
		A_exponent2 <=0;
		B_exponent1 <=0;
		B_exponent2 <=0;
	end
	else begin
		AB_sign1 <= AB_sign ;
		AB_sign2 <= AB_sign1; 
		AB_sign3 <= AB_sign2;
		A_exponent1 <= A_exponent;
		A_exponent2 <= A_exponent1;
		A_exponent3 <= A_exponent2;
		B_exponent1 <= B_exponent;
		B_exponent2 <= B_exponent1;
		B_exponent3 <= B_exponent2;	
	end
end
sign s1 (A_sign,B_sign,AB_sign);
fraction s2 (A_fraction, B_fraction, AB_fraction, cin, CLK, RESETn);
exponent s3 (A_exponent3, B_exponent3, cin ,AB_exponent, OutOfBound);

assign AB = {AB_sign3, AB_exponent, AB_fraction};

endmodule
/////////////sign module///////////////

module sign(
input A,B,
output AB_sign
);

assign AB_sign = A ^ B;

endmodule	

/////////////fraction module///////////////

module fraction(
input [10:0] A,B,
output [9:0] AB_fraction,
output carry,
input CLK, RESETn
);

wire [11:0] A_fraction1;
wire [11:0] B_fraction1;
wire [23:0] AB_frac, AB_fraction1;

assign A_fraction1={1'b0,A};
assign B_fraction1={1'b0,B};

booth_multiplier booth( A_fraction1, B_fraction1, AB_frac, CLK, RESETn);

//rounding nearset to even (guard bit, round bit, stickybit)
assign AB_fraction1 = (!AB_frac[9]) ? AB_frac : (!AB_frac[8:0]) ? (AB_frac[10]) ? AB_frac+10'b10_0000_0000 : AB_frac : AB_frac+10'b10_0000_0000; //24bit 덧셈기
    
//output
assign AB_fraction = (AB_fraction1[21]) ? AB_fraction1[20:11] : AB_fraction1[19:10];
assign carry = (AB_fraction1[21]) ? 1'b1 : 1'b0;

endmodule
/////////////exponent module////////////////////

module exponent(
input [4:0] A,B,
input cin,
output [4:0] AB_exponent,
output OutOfBound
);
wire [5:0] AB_exponent1;
//bias = 4'b1000 (4'd15)
assign AB_exponent1 = A + B + cin - 4'b1111;
assign AB_exponent = (AB_exponent1[5]) ? 5'b0 : AB_exponent1[4:0];
assign OutOfBound = (AB_exponent1[5]) ? 1'b1 : 1'b0 ;
endmodule





//////////////////////////////////////////////////////////////////////////////////booth mul
module xor2 (input wire i0, i1, output wire o);
  assign o = i0 ^ i1;
endmodule

module adder_subractor(cin,i0,i1,sum);

   input  cin;
   input  [11:0] i0,i1;
   output [11:0] sum;
	wire cout;
	wire [11:0] i1_1; 
	
	//if cin == 1, i1_1 = 1's complement
	//else i1_1 = i1
    xor2 x0 (i1[0], cin, i1_1[0]);
    xor2 x1 (i1[1], cin, i1_1[1]);
    xor2 x2 (i1[2], cin, i1_1[2]);
    xor2 x3 (i1[3], cin, i1_1[3]);
    xor2 x4 (i1[4], cin, i1_1[4]);
    xor2 x5 (i1[5], cin, i1_1[5]);
    xor2 x6 (i1[6], cin, i1_1[6]);
    xor2 x7 (i1[7], cin, i1_1[7]);
    xor2 x8 (i1[8], cin, i1_1[8]);
    xor2 x9 (i1[9], cin, i1_1[9]);
	 xor2 x10 (i1[10], cin, i1_1[10]);
	 xor2 x11 (i1[11], cin, i1_1[11]);
	 
	//if cin == 1, i1_1 = 2's complement	   
    ksa12 KSA(i0,i1_1,cin,sum,cout);

endmodule


module booth_substep(
    input wire signed [11:0] acc,    
    input [11:0] Q,     
    input q0,       
    input [11:0] multiplicand,  
    output reg signed [11:0] next_acc,   
    output reg [11:0] next_Q, 
    output reg q0_next);
    
	wire [11:0] result; 
	
	adder_subractor addsub(Q[0], acc, multiplicand, result);
	
		always @(*) begin	
		if(Q[0] == q0) begin
            //right shift
            q0_next = Q[0];
            next_Q = Q>>1;
            next_Q[11] = acc[0];
            next_acc = acc>>1;
            //with sign extension
			if (acc[11] == 1)
					next_acc[11] = 1;
		end

		else begin        
		      //right shift
            q0_next = Q[0];
            next_Q = Q>>1;
            next_Q[11] = result[0];
            //right shift
            next_acc = result>>1;
            //with sign extension
			if (result[11] == 1)
                next_acc[11] = 1; 
		end			
end	
endmodule 

module booth_multiplier(multiplier, multiplicand,product,CLK,RESETn);
	input [11:0] multiplier, multiplicand;
	input CLK, RESETn;
	
	output signed [23:0] product;
	
	wire signed [11:0] Q[0:3];  
	wire signed [11:0] acc[0:4]; 
	wire signed [11:0] q0;
	wire qout;
	
	reg signed [11:0] multiplicand0, multiplicand1, multiplicand2;
	reg signed [11:0] Q1, Q2;
	reg signed [11:0] acc1, acc2;
	reg signed [11:0] q01, q02;
	
	wire signed [11:0] q011;
	wire signed [11:0] acc11[4:8];
	wire signed [11:0] Q11[3:7];
	
	wire signed [11:0] q022;
	wire signed [11:0] acc22[8:11];
	wire signed [11:0] Q22[7:10];
	
	always @ (posedge CLK, negedge RESETn)
	begin
		if (!RESETn)
		begin
		
			acc1 			<= 0;
			
			acc2			<= 0;
			Q1 			<= 0;

			Q2				<= 0;
	
			
			multiplicand0	<= 0;		
			q01 				<= 0;
			multiplicand1	<=	0;
			q02				<= 0;
			multiplicand2	<=	0;
		end	
		else
		begin

			multiplicand0	<=	multiplicand;			
			//stage1->2
			acc1			<=acc[4];
			Q1				<= Q[3];
			q01				<= q0;					
			multiplicand1	<=	multiplicand0;
			
			//stage2->3
			acc2			<=acc11[8];
			Q2				<= Q11[7];
			q02				<= q011;
			multiplicand2	<=	multiplicand1;	
		end	
	end
	assign acc[0] = 12'b0000_0000_0000;   //initialising accumulator to 0
	
assign acc11[4]			=acc1;
assign Q11[3]				= Q1;
assign q011 				= q01;
assign acc22[8]			=acc2;
assign Q22[7]				= Q2;
assign q022				   = q02;
			

	//stage1
	booth_substep step1(acc[0], multiplier, 1'b0, multiplicand, acc[1],        Q[0],         q0[1]);
	booth_substep step2(acc[1], Q[0],      q0[1], multiplicand, acc[2],        Q[1],         q0[2]);
	booth_substep step3(acc[2], Q[1],      q0[2], multiplicand, acc[3],        Q[2],         q0[3]);
	booth_substep step4(acc[3], Q[2],      q0[3], multiplicand, acc[4],        Q[3],         q0[4]);
	//stage2
	booth_substep step5(acc11[4], Q11[3],      q011[4], multiplicand1, acc11[5],        Q11[4],         q011[5]);
	booth_substep step6(acc11[5], Q11[4],      q011[5], multiplicand1, acc11[6],        Q11[5],         q011[6]);
	booth_substep step7(acc11[6], Q11[5],      q011[6], multiplicand1, acc11[7],        Q11[6],         q011[7]);
	booth_substep step8(acc11[7], Q11[6],      q011[7], multiplicand1, acc11[8],        Q11[7],         q011[8]);
	//stage3
	booth_substep step9(acc22[8], Q22[7],      q022[8], multiplicand2, acc22[9],        Q22[8],         q022[9]);
	booth_substep step10(acc22[9], Q22[8],      q022[9], multiplicand2, acc22[10],        Q22[9],         q022[10]);
	booth_substep step11(acc22[10], Q22[9],      q022[10], multiplicand2, acc22[11],        Q22[10],         q022[11]);
	booth_substep step12(acc22[11], Q22[10],      q022[11], multiplicand2, product[23:12], product[11:0], qout);
	
	 
endmodule

module ksa12(
input [11:0] a,
input [11:0] b,
input cin,
output [11:0] sum,
output cout
);

wire [11:0] p,g,pp1,gg1,pp2,gg2,pp3,gg3,pp4,gg4;

//stage0 pg 생성
pg_cell stage0(a,b,p,g);

//stage1 
gray_cell s1_0(p[0],g[0],cin,gg1[0]);
black_cell s1_1(p[1],g[1],p[0],g[0],pp1[1],gg1[1]);
black_cell s1_2(p[2],g[2],p[1],g[1],pp1[2],gg1[2]);
black_cell s1_3(p[3],g[3],p[2],g[2],pp1[3],gg1[3]);
black_cell s1_4(p[4],g[4],p[3],g[3],pp1[4],gg1[4]);
black_cell s1_5(p[5],g[5],p[4],g[4],pp1[5],gg1[5]);
black_cell s1_6(p[6],g[6],p[5],g[5],pp1[6],gg1[6]);
black_cell s1_7(p[7],g[7],p[6],g[6],pp1[7],gg1[7]);
black_cell s1_8(p[8],g[8],p[7],g[7],pp1[8],gg1[8]);
black_cell s1_9(p[9],g[9],p[8],g[8],pp1[9],gg1[9]);
black_cell s1_10(p[10],g[10],p[9],g[9],pp1[10],gg1[10]);
black_cell s1_11(p[11],g[11],p[10],g[10],pp1[11],gg1[11]);

//stage2
assign gg2[0] = gg1[0];
gray_cell s2_0(pp1[1],gg1[1],cin,gg2[1]);
gray_cell s2_1(pp1[2],gg1[2],gg1[0],gg2[2]);
black_cell s2_2(pp1[3],gg1[3],pp1[1],gg1[1],pp2[3],gg2[3]);
black_cell s2_3(pp1[4],gg1[4],pp1[2],gg1[2],pp2[4],gg2[4]);
black_cell s2_4(pp1[5],gg1[5],pp1[3],gg1[3],pp2[5],gg2[5]);
black_cell s2_5(pp1[6],gg1[6],pp1[4],gg1[4],pp2[6],gg2[6]);
black_cell s2_6(pp1[7],gg1[7],pp1[5],gg1[5],pp2[7],gg2[7]);
black_cell s2_7(pp1[8],gg1[8],pp1[6],gg1[6],pp2[8],gg2[8]);
black_cell s2_8(pp1[9],gg1[9],pp1[7],gg1[7],pp2[9],gg2[9]);
black_cell s2_9(pp1[10],gg1[10],pp1[8],gg1[8],pp2[10],gg2[10]);
black_cell s2_10(pp1[11],gg1[11],pp1[9],gg1[9],pp2[11],gg2[11]);

//stage3
assign gg3[0] = gg2[0];
assign gg3[1] = gg2[1];
assign gg3[2] = gg2[2];
gray_cell s3_0(pp2[3],gg2[3],cin,gg3[3]);
gray_cell s3_1(pp2[4],gg2[4],gg2[0],gg3[4]);
gray_cell s3_2(pp2[5],gg2[5],gg2[1],gg3[5]);
gray_cell s3_3(pp2[6],gg2[6],gg2[2],gg3[6]);
black_cell s3_4(pp2[7],gg2[7],pp2[3],gg2[3],pp3[7],gg3[7]);
black_cell s3_5(pp2[8],gg2[8],pp2[4],gg2[4],pp3[8],gg3[8]);
black_cell s3_6(pp2[9],gg2[9],pp2[5],gg2[5],pp3[9],gg3[9]);
black_cell s3_7(pp2[10],gg2[10],pp2[6],gg2[6],pp3[10],gg3[10]);
black_cell s3_8(pp2[11],gg2[11],pp2[7],gg2[7],pp3[11],gg3[11]);

//stage4
assign gg4[0] = gg3[0];
assign gg4[1] = gg3[1];
assign gg4[2] = gg3[2];
assign gg4[3] = gg3[3];
assign gg4[4] = gg3[4];
assign gg4[5] = gg3[5];
assign gg4[6] = gg3[6];
gray_cell s4_0(pp3[7],gg3[7],cin,gg4[7]);
gray_cell s4_1(pp3[8],gg3[8],gg3[0],gg4[8]);
gray_cell s4_2(pp3[9],gg3[9],gg3[1],gg4[9]);
gray_cell s4_3(pp3[10],gg3[10],gg3[2],gg4[10]);
gray_cell s4_4(pp3[11],gg3[11],gg3[3],gg4[11]);

//result
assign cout = gg4[11];
assign sum[0] = p[0] ^ cin;
assign sum[11:1] = p[11:1] ^ gg4[10:0];

endmodule

module black_cell(
  input  p1,
  input  g1,
  input  p0,
  input  g0,
  output p,
  output g
);

assign g = g1 | (g0 & p1);
assign p = p1 & p0;

endmodule

module gray_cell(
  input  p1,
  input  g1,
  input  g0,
  output g
);

assign g = g1 | (g0 & p1);

endmodule

module pg_cell(
input [11:0] a,
input [11:0] b,
output [11:0] p,
output [11:0] g
);

assign p=a^b;
assign g=a&b;

endmodule

module floatingadd(A,B,OutOfBound_in,SUM,OutOfBound,CLK,RESETn);
input CLK,RESETn;
input [15:0] A,B;
input OutOfBound_in;
output reg [15:0] SUM;
output reg OutOfBound;   //결과값이 0인것도 OutOfBound 취급함.

reg A_sign, B_sign, C_sign;
reg [4:0] A_exponent,B_exponent, diff;
reg [10:0] A_fraction, B_fraction;
reg [24:0] C_frac2;  //13번 shift부터는 똑같음.
reg [9:0] C_fraction;
reg [5:0] C_exponent_1;
reg [4:0] C_exponent;
reg A1;

wire [24:0] A_fraction1;
wire [24:0] B_fraction1;
wire [24:0] A_fraction2;
wire [24:0] B_fraction2;
wire c_in;
wire [24:0] C_frac;
always @ (*) begin
	if (OutOfBound_in)
		OutOfBound=1;
	else begin
	A_sign = A[15];
	A_exponent = A[14:10];
	A_fraction = {1'b1,A[9:0]};

	B_sign = B[15];
	B_exponent = B[14:10];
	B_fraction = {1'b1,B[9:0]};
	
//A=B (exponent) & A=B (fraction)
if (A_exponent == B_exponent && A_fraction == B_fraction) begin
	if (A_sign==B_sign) begin
		C_sign = A_sign;
		C_exponent_1 = A_exponent+1;
		C_exponent = C_exponent_1 [4:0]; 
		C_fraction = A_fraction;
		end
		if (C_exponent_1[5] == 1'b1) 
			OutOfBound=1;
		else
			OutOfBound=0;	
end
else begin
	OutOfBound=1;
end
		
//A>B (fraction)
	if ( (A_exponent > B_exponent) || (A_exponent == B_exponent && A_fraction > B_fraction)) begin 
	C_sign = A_sign;
	diff = A_exponent - B_exponent;
	A1=1;
		if (diff>=5'b01101) begin
			C_fraction = A_fraction[9:0];
			C_exponent = A_exponent;
			OutOfBound=0;
		end
		else begin 
//rounding (guard bit, round bit, stickybit) nearest even.////
	if (diff==0)
		C_frac2 = C_frac;
		
	if (diff==1) begin
		if (C_frac[diff-1]==0)
			C_frac2 = C_frac;
		else	
			if (C_frac[diff]==1)
				C_frac2 = C_frac+(1'b1 << (diff));
			else
				C_frac2 = C_frac;
	end
	
	if (diff>=2) begin
		if (C_frac[diff-1]==0)
			C_frac2 = C_frac;
		else	
			if (C_frac[diff-2]==1)
				C_frac2 = C_frac+(1'b1 << (diff));
			else 
				if (C_frac[diff]==1)
					C_frac2 = C_frac+(1'b1 << (diff));
				else
					C_frac2 = C_frac;	
	end
/////////////////////////////////////////////////////////////	
		if (C_frac2[diff+11] ==1 ) begin //overflow 발생경우
			C_fraction = C_frac2 >> (diff+1);
			C_exponent_1 = A_exponent + 1 ;
			if (C_exponent_1 >= 6'b1_00000)
				OutOfBound=1;
			else
				OutOfBound=0;
			C_exponent = C_exponent_1[4:0];
		end
	else begin
		C_fraction = C_frac2 >> diff;
		C_exponent_1 = A_exponent;
		if (C_exponent_1 >= 6'b1_00000)
			OutOfBound=1;
		else
			OutOfBound=0;
		C_exponent = C_exponent_1 [4:0];
	end
	end
end
//A<B인 경우
	
//B>A (fraction)
	if ( (B_exponent > A_exponent) || (B_exponent == A_exponent && B_fraction > A_fraction)) begin 
	C_sign = B_sign;
	diff = B_exponent - A_exponent;
	A1=0;
		if (diff>=5'b01101) begin
			C_fraction = B_fraction[9:0];
			C_exponent = B_exponent;
			OutOfBound=0;
		end
		else begin 	

//rounding (guard bit, round bit, stickybit) nearest even.////
	if (diff==0)
		C_frac2 = C_frac;
		
	if (diff==1) begin
		if (C_frac[diff-1]==0)
			C_frac2 = C_frac;
		else	
			if (C_frac[diff]==1)
				C_frac2 = C_frac+(1'b1 << (diff));
			else
				C_frac2 = C_frac;
	end
	
	if (diff>=2) begin
		if (C_frac[diff-1]==0)
			C_frac2 = C_frac;
		else	
			if (C_frac[diff-2]==1)
				C_frac2 = C_frac+(1'b1 << (diff));
			else 
				if (C_frac[diff]==1)
					C_frac2 = C_frac+(1'b1 << (diff));
				else
					C_frac2 = C_frac;	
	end
/////////////////////////////////////////////////////////////	
		if (C_frac2[diff+11] ==1 ) begin //overflow 발생경우
			C_fraction = C_frac2 >> (diff+1);
			C_exponent_1 = B_exponent + 1 ;
			if (C_exponent_1 >= 6'b1_00000)
				OutOfBound=1;
			else
				OutOfBound=0;
			C_exponent = C_exponent_1[4:0];
		end
	else begin
		C_fraction = C_frac2 >> diff;
		C_exponent_1 = B_exponent;
		if (C_exponent_1 >= 6'b1_00000)
			OutOfBound=1;
		else
			OutOfBound=0;
		C_exponent = C_exponent_1 [4:0];
	end
	end
end
end
		SUM={C_sign,C_exponent,C_fraction};

end	

assign A_fraction1 = (A1) ? (A_fraction << diff) : (B_fraction << diff);
assign A_fraction2 = {{14{1'b0}},A_fraction};
assign B_fraction2 = {{14{1'b0}},B_fraction};
assign B_fraction1 = (!A1) ? (A_sign^B_sign) ? A_fraction2 ^ {25{1'b1}} : A_fraction :(A_sign^B_sign) ? B_fraction2 ^ {25{1'b1}} : B_fraction;

assign c_in = (A_sign^B_sign) ? 1'b1 : 1'b0;
ksa25 ksa1(A_fraction1,B_fraction1,c_in,C_frac,cout);

endmodule

module ksa25(
input [24:0] a,
input [24:0] b,
input cin,
output [24:0] sum,
output cout
);

wire [24:0] p,g,pp1,gg1,pp2,gg2,pp3,gg3,pp4,gg4,pp5,gg5;

//stage0 pg 생성
pg_cell2 stage0(a,b,p,g);

//stage1 
gray_cell s1_0(p[0],g[0],cin,gg1[0]);
black_cell s1_1(p[1],g[1],p[0],g[0],pp1[1],gg1[1]);
black_cell s1_2(p[2],g[2],p[1],g[1],pp1[2],gg1[2]);
black_cell s1_3(p[3],g[3],p[2],g[2],pp1[3],gg1[3]);
black_cell s1_4(p[4],g[4],p[3],g[3],pp1[4],gg1[4]);
black_cell s1_5(p[5],g[5],p[4],g[4],pp1[5],gg1[5]);
black_cell s1_6(p[6],g[6],p[5],g[5],pp1[6],gg1[6]);
black_cell s1_7(p[7],g[7],p[6],g[6],pp1[7],gg1[7]);
black_cell s1_8(p[8],g[8],p[7],g[7],pp1[8],gg1[8]);
black_cell s1_9(p[9],g[9],p[8],g[8],pp1[9],gg1[9]);
black_cell s1_10(p[10],g[10],p[9],g[9],pp1[10],gg1[10]);
black_cell s1_11(p[11],g[11],p[10],g[10],pp1[11],gg1[11]);
black_cell s1_12(p[12],g[12],p[11],g[11],pp1[12],gg1[12]);
black_cell s1_13(p[13],g[13],p[12],g[12],pp1[13],gg1[13]);
black_cell s1_14(p[14],g[14],p[13],g[13],pp1[14],gg1[14]);
black_cell s1_15(p[15],g[15],p[14],g[14],pp1[15],gg1[15]);
black_cell s1_16(p[16],g[16],p[15],g[15],pp1[16],gg1[16]);
black_cell s1_17(p[17],g[17],p[16],g[16],pp1[17],gg1[17]);
black_cell s1_18(p[18],g[18],p[17],g[17],pp1[18],gg1[18]);
black_cell s1_19(p[19],g[19],p[18],g[18],pp1[19],gg1[19]);
black_cell s1_20(p[20],g[20],p[19],g[19],pp1[20],gg1[20]);
black_cell s1_21(p[21],g[21],p[20],g[20],pp1[21],gg1[21]);
black_cell s1_22(p[22],g[22],p[21],g[21],pp1[22],gg1[22]);
black_cell s1_23(p[23],g[23],p[22],g[22],pp1[23],gg1[23]);
black_cell s1_24(p[24],g[24],p[23],g[23],pp1[24],gg1[24]);


//stage2
assign gg2[0] = gg1[0];
gray_cell s2_0(pp1[1],gg1[1],cin,gg2[1]);
gray_cell s2_1(pp1[2],gg1[2],gg1[0],gg2[2]);
black_cell s2_2(pp1[3],gg1[3],pp1[1],gg1[1],pp2[3],gg2[3]);
black_cell s2_3(pp1[4],gg1[4],pp1[2],gg1[2],pp2[4],gg2[4]);
black_cell s2_4(pp1[5],gg1[5],pp1[3],gg1[3],pp2[5],gg2[5]);
black_cell s2_5(pp1[6],gg1[6],pp1[4],gg1[4],pp2[6],gg2[6]);
black_cell s2_6(pp1[7],gg1[7],pp1[5],gg1[5],pp2[7],gg2[7]);
black_cell s2_7(pp1[8],gg1[8],pp1[6],gg1[6],pp2[8],gg2[8]);
black_cell s2_8(pp1[9],gg1[9],pp1[7],gg1[7],pp2[9],gg2[9]);
black_cell s2_9(pp1[10],gg1[10],pp1[8],gg1[8],pp2[10],gg2[10]);
black_cell s2_10(pp1[11],gg1[11],pp1[9],gg1[9],pp2[11],gg2[11]);
black_cell s2_11(pp1[12],gg1[12],pp1[10],gg1[10],pp2[12],gg2[12]);
black_cell s2_12(pp1[13],gg1[13],pp1[11],gg1[11],pp2[13],gg2[13]);
black_cell s2_13(pp1[14],gg1[14],pp1[12],gg1[12],pp2[14],gg2[14]);
black_cell s2_14(pp1[15],gg1[15],pp1[13],gg1[13],pp2[15],gg2[15]);
black_cell s2_15(pp1[16],gg1[16],pp1[14],gg1[14],pp2[16],gg2[16]);
black_cell s2_16(pp1[17],gg1[17],pp1[15],gg1[15],pp2[17],gg2[17]);
black_cell s2_17(pp1[18],gg1[18],pp1[16],gg1[16],pp2[18],gg2[18]);
black_cell s2_18(pp1[19],gg1[19],pp1[17],gg1[17],pp2[19],gg2[19]);
black_cell s2_19(pp1[20],gg1[20],pp1[18],gg1[18],pp2[20],gg2[20]);
black_cell s2_20(pp1[21],gg1[21],pp1[19],gg1[19],pp2[21],gg2[21]);
black_cell s2_21(pp1[22],gg1[22],pp1[20],gg1[20],pp2[22],gg2[22]);
black_cell s2_22(pp1[23],gg1[23],pp1[21],gg1[21],pp2[23],gg2[23]);
black_cell s2_23(pp1[24],gg1[24],pp1[22],gg1[22],pp2[24],gg2[24]);



//stage3
assign gg3[0] = gg2[0];
assign gg3[1] = gg2[1];
assign gg3[2] = gg2[2];
gray_cell s3_0(pp2[3],gg2[3],cin,gg3[3]);
gray_cell s3_1(pp2[4],gg2[4],gg2[0],gg3[4]);
gray_cell s3_2(pp2[5],gg2[5],gg2[1],gg3[5]);
gray_cell s3_3(pp2[6],gg2[6],gg2[2],gg3[6]);
black_cell s3_4(pp2[7],gg2[7],pp2[3],gg2[3],pp3[7],gg3[7]);
black_cell s3_5(pp2[8],gg2[8],pp2[4],gg2[4],pp3[8],gg3[8]);
black_cell s3_6(pp2[9],gg2[9],pp2[5],gg2[5],pp3[9],gg3[9]);
black_cell s3_7(pp2[10],gg2[10],pp2[6],gg2[6],pp3[10],gg3[10]);
black_cell s3_8(pp2[11],gg2[11],pp2[7],gg2[7],pp3[11],gg3[11]);
black_cell s3_9(pp2[12],gg2[12],pp2[8],gg2[8],pp3[12],gg3[12]);
black_cell s3_10(pp2[13],gg2[13],pp2[9],gg2[9],pp3[13],gg3[13]);
black_cell s3_11(pp2[14],gg2[14],pp2[10],gg2[10],pp3[14],gg3[14]);
black_cell s3_12(pp2[15],gg2[15],pp2[11],gg2[11],pp3[15],gg3[15]);
black_cell s3_13(pp2[16],gg2[16],pp2[12],gg2[12],pp3[16],gg3[16]);
black_cell s3_14(pp2[17],gg2[17],pp2[13],gg2[13],pp3[17],gg3[17]);
black_cell s3_15(pp2[18],gg2[18],pp2[14],gg2[14],pp3[18],gg3[18]);
black_cell s3_16(pp2[19],gg2[19],pp2[15],gg2[15],pp3[19],gg3[19]);
black_cell s3_17(pp2[20],gg2[20],pp2[16],gg2[16],pp3[20],gg3[20]);
black_cell s3_18(pp2[21],gg2[21],pp2[17],gg2[17],pp3[21],gg3[21]);
black_cell s3_19(pp2[22],gg2[22],pp2[18],gg2[18],pp3[22],gg3[22]);
black_cell s3_20(pp2[23],gg2[23],pp2[19],gg2[19],pp3[23],gg3[23]);
black_cell s3_21(pp2[24],gg2[24],pp2[20],gg2[20],pp3[24],gg3[24]);



//stage4
assign gg4[0] = gg3[0];
assign gg4[1] = gg3[1];
assign gg4[2] = gg3[2];
assign gg4[3] = gg3[3];
assign gg4[4] = gg3[4];
assign gg4[5] = gg3[5];
assign gg4[6] = gg3[6];
gray_cell s4_0(pp3[7],gg3[7],cin,gg4[7]);
gray_cell s4_1(pp3[8],gg3[8],gg3[0],gg4[8]);
gray_cell s4_2(pp3[9],gg3[9],gg3[1],gg4[9]);
gray_cell s4_3(pp3[10],gg3[10],gg3[2],gg4[10]);
gray_cell s4_4(pp3[11],gg3[11],gg3[3],gg4[11]);
gray_cell s4_5(pp3[12],gg3[12],gg3[4],gg4[12]);
gray_cell s4_6(pp3[13],gg3[13],gg3[5],gg4[13]);
gray_cell s4_7(pp3[14],gg3[14],gg3[6],gg4[14]);
black_cell s4_8(pp3[15],gg3[15],pp3[7],gg3[7],pp4[15],gg4[15]);
black_cell s4_9(pp3[16],gg3[16],pp3[8],gg3[8],pp4[16],gg4[16]);
black_cell s4_10(pp3[17],gg3[17],pp3[9],gg3[9],pp4[17],gg4[17]);
black_cell s4_11(pp3[18],gg3[18],pp3[10],gg3[10],pp4[18],gg4[18]);
black_cell s4_12(pp3[19],gg3[19],pp3[11],gg3[11],pp4[19],gg4[19]);
black_cell s4_13(pp3[20],gg3[20],pp3[12],gg3[12],pp4[20],gg4[20]);
black_cell s4_14(pp3[21],gg3[21],pp3[13],gg3[13],pp4[21],gg4[21]);
black_cell s4_15(pp3[22],gg3[22],pp3[14],gg3[14],pp4[22],gg4[22]);
black_cell s4_16(pp3[23],gg3[23],pp3[15],gg3[15],pp4[23],gg4[23]);
black_cell s4_17(pp3[24],gg3[24],pp3[16],gg3[16],pp4[24],gg4[24]);


//stage5
assign gg5[0] = gg4[0];
assign gg5[1] = gg4[1];
assign gg5[2] = gg4[2];
assign gg5[3] = gg4[3];
assign gg5[4] = gg4[4];
assign gg5[5] = gg4[5];
assign gg5[6] = gg4[6];
assign gg5[7] = gg4[7];
assign gg5[8] = gg4[8];
assign gg5[9] = gg4[9];
assign gg5[10] = gg4[10];
assign gg5[11] = gg4[11];
assign gg5[12] = gg4[12];
assign gg5[13] = gg4[13];
assign gg5[14] = gg4[14];
gray_cell s5_0(pp4[15],gg4[15],cin,gg5[15]);
gray_cell s5_1(pp4[16],gg4[16],gg4[0],gg5[16]);
gray_cell s5_2(pp4[17],gg4[17],gg4[1],gg5[17]);
gray_cell s5_3(pp4[18],gg4[18],gg4[2],gg5[18]);
gray_cell s5_4(pp4[19],gg4[19],gg4[3],gg5[19]);
gray_cell s5_5(pp4[20],gg4[20],gg4[4],gg5[20]);
gray_cell s5_6(pp4[21],gg4[21],gg4[5],gg5[21]);
gray_cell s5_7(pp4[22],gg4[22],gg4[6],gg5[22]);
gray_cell s5_8(pp4[23],gg4[23],gg4[7],gg5[23]);
gray_cell s5_9(pp4[24],gg4[24],gg4[8],gg5[24]);

//result
assign cout = gg4[24];
assign sum[0] = p[0] ^ cin;
assign sum[24:1] = p[24:1] ^ gg4[23:0];

endmodule

module pg_cell2(
input [24:0] a,
input [24:0] b,
output [24:0] p,
output [24:0] g
);

assign p=a^b;
assign g=a&b;

endmodule



module pg_cell2(
input [24:0] a,
input [24:0] b,
output [24:0] p,
output [24:0] g
);

assign p=a^b;
assign g=a&b;

endmodule

