module TOP(a, b, CLK, RESETn, prod);

	input [10:0] a, b;
	input CLK, RESETn;
	output [21:0] prod;

 multi_11bit_piplined Top(.a(a),.b(b),.CLK(CLK),.RESETn(RESETn),.prod(prod));
endmodule

module multi_11bit_piplined (a, b, CLK, RESETn, prod);
	
	input [10:0] a, b;
	input CLK, RESETn;
	output [21:0] prod;
	

	wire [21:0] partials0;
	wire [21:0] partials1;
	wire [21:0] partials2;
	wire [21:0] partials3;
	wire [21:0] partials4;
	wire [21:0] partials5;
	wire [21:0] partials6;
	wire [21:0] partials7;
	wire [21:0] partials8;
	wire [21:0] partials9;
	wire [21:0] partials10;

	reg [21:0] partials00;
	reg [21:0] partials111; 
	reg [10:0] a1;
	reg [10:0] b1;
	reg [10:0] a2;
	reg [10:0] b2;
	reg [10:0] a3;
	reg [10:0] b3;

	
always @ (posedge CLK or negedge RESETn) begin
	if (!RESETn) begin
	partials00<=0 ;
	partials111<=0 ;
	end
	else begin
	//stage 0->1

	//stage 1->2
	partials00 <= partials3 ;
	a2 <= a;
	b2 <= b;
	//stage 2->3
	partials111 <= partials7 ;
	a3 <= a2;
	b3 <= b2;

	end
end
   //stage1
   assign partials0  =  a[0]  ? b : 0;
	assign partials1  = (a[1]  ? b << 1  : 0) + partials0;
	assign partials2  = (a[2]  ? b << 2  : 0) + partials1;
	assign partials3  = (a[3]  ? b << 3  : 0) + partials2;
	//stage2
	assign partials4  = (a2[4]  ? b2 << 4  : 0) + partials00;
	assign partials5  = (a2[5]  ? b2 << 5  : 0) + partials4;
	assign partials6  = (a2[6]  ? b2 << 6  : 0) + partials5;
	assign partials7  = (a2[7]  ? b2 << 7  : 0) + partials6;
	//stage3
	assign partials8  = (a3[8]  ? b3 << 8  : 0) + partials111;
	assign partials9  = (a3[9]  ? b3 << 9  : 0) + partials8;
	assign partials10 = (a3[10] ? b3 << 10 : 0) + partials9;

	assign prod = partials10;
endmodule
